{"version":3,"names":["response","common_vendor","ref","code","sessionId","testApi1","api_request","request","url","method","then","data","value","catch","error","testApi","index","__f__","wx$1","login","success","res","errMsg","_success","_asyncToGenerator2","_regeneratorRuntime2","mark","_callee","userCode","response2","wrap","_callee$","_context","prev","next","sent","statusCode","showToast","title","icon","stop","_x","apply","arguments","wx","createPage","MiniProgramPage"],"sources":["test.vue","cGFnZXMvdGVzdC90ZXN0LnZ1ZQ"],"sourcesContent":["<template>\n  <view>\n    <button @click=\"testApi1\">Test API</button>\n    <text>{{ response }}</text>\n  </view>\n  <view>\n    <button @click=\"testApi\">测试获取 code</button>\n    <text>获取的 code：{{ code }}</text>\n    <text>获取的 sessionId：{{ sessionId }}</text>\n  </view>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport request from '../../api/request'; // 引入封装的请求函数\n\n// 响应数据\nconst response = ref('');\nconst code = ref('');\nconst sessionId = ref('');\nconst testApi1 = ()=>{\n  request({\n    url: '/user/test', // 后端接口地址\n    method: 'GET',\n  }).then((data) => {\n      // 请求成功后更新响应数据\n      response.value = data;\n    })\n    .catch((error) => {\n      // 处理请求错误\n      response.value = '请求失败：' + error;\n    });\n}\n// 测试API函数\nconst testApi = () => {\n  console.log(\"using testApi------------------\")\n  wx.login({\n    success (res) {\n      if (res.code) {\n        //发起网络请求\n        wx.request({\n          url: 'https://example.com/onLogin',\n          data: {\n            code: res.code\n          }\n        })\n\t\tconsole.log(\"getUserInfo------------------\")\n\t\t// async wx.getUserInfo({\n\t\t//     success: function(res) {\n\t\t// \t\tconsole.log(res);\n\t\t//     }\n\t\t// })\n        console.log(res.code);\n      } else {\n        console.error('登录失败！' + res.errMsg)\n      }\n    }\n  })\n  wx.login({\n    success: async (res) => {\n      const userCode = res.code;  // 获取 code\n      if (userCode) {\n        // 显示code\n        code.value = userCode;\n\n        // 发起请求\n        const response = await request({\n          url: '/weixin/sessionId/' + userCode\n        });\n\n        if (response.statusCode === 200) {\n          // 获取返回的 sessionId\n          sessionId.value = response.data.data;\n          wx.showToast({\n            title: '请求成功！',\n            icon: 'success',\n          });\n        } else {\n          wx.showToast({\n            title: '请求失败！',\n            icon: 'error',\n          });\n        }\n      } else {\n        console.log(\"获取用户登录状态失败!\" + res.errMsg);\n      }\n    }\n  });\n  // 使用封装的请求函数发送请求\n  // request({\n  //   url: '/user/test', // 后端接口地址\n  //   method: 'GET',\n  // }).then((data) => {\n  //     // 请求成功后更新响应数据\n  //     response.value = data;\n  //   })\n  //   .catch((error) => {\n  //     // 处理请求错误\n  //     response.value = '请求失败：' + error;\n  //   });\n};\n\n\n\n</script>\n\n<style scoped>\n/* 样式部分，根据需要自行调整 */\nbutton {\n  margin: 20px;\n  padding: 10px;\n  background-color: #007AFF;\n  color: white;\n  border-radius: 5px;\n  font-size: 16px;\n}\n\ntext {\n  display: block;\n  margin-top: 20px;\n  font-size: 16px;\n  color: #333;\n}\n</style>\n","import MiniProgramPage from 'D:/作业/软件工程/课程设计/campustrade/code/campustrade-front/pages/test/test.vue'\nwx.createPage(MiniProgramPage)"],"mappings":"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","ignoreList":[]}